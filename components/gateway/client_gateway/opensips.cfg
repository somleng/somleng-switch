####### Global Parameters #########

/* uncomment the following lines to enable debugging */
debug_mode=no

log_level=3
xlog_level=2
log_stderror=yes
log_facility=LOG_LOCAL0

udp_workers=4

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes

socket=udp:eth0:SIP_PORT
socket=tcp:eth0:SIP_PORT # TCP Health Check

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

loadmodule "proto_tcp.so"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", FIFO_NAME)
modparam("mi_fifo", "fifo_mode", 0666)

#### POSTGRES module
loadmodule "db_postgres.so"

#### AVPOPS module
loadmodule "avpops.so"

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url", DATABASE_URL)

### OPTIONS module
loadmodule "options.so"

#### NAT modules
loadmodule "nathelper.so"
modparam("nathelper", "received_avp", "$avp(received)")

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")
modparam("usrloc", "db_url", DATABASE_URL)

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
# https://opensips.org/html/docs/modules/3.3.x/auth_db.html#param_calculate_ha1
modparam("auth_db", "calculate_ha1", 0) # Precalculated hash in database
modparam("auth_db", "db_url", DATABASE_URL)

#### Registrar Module
loadmodule "registrar.so"
modparam("registrar", "min_expires", 600)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "received_avp", "$avp(received)")

#### Domain Module
loadmodule "domain.so"
modparam("domain", "db_url", DATABASE_URL)
modparam("domain", "db_mode", 1)

### LOAD BALANCER module
loadmodule "load_balancer.so"
modparam("load_balancer", "db_url", DATABASE_URL)
modparam("load_balancer", "probing_method", "OPTIONS")

modparam("load_balancer", "probing_interval", 30)
modparam("load_balancer", "fetch_freeswitch_stats", 1)

loadmodule "freeswitch.so"

#### RTP Engine Module
loadmodule "rtpengine.so"
modparam("rtpengine", "db_url", DATABASE_URL)

loadmodule "proto_udp.so"

####### Routing Logic ########

# main request routing logic

route{
  xlog("L_NOTICE", "Receiving request $rm from $si\n");

  # https://kb.smartvox.co.uk/opensips/nat-contact-and-via-fixing-in-sip-part-2/
  # https://www.cnblogs.com/zhangxianrong/p/14251867.html
  # https://opensips.org/html/docs/modules/3.3.x/nathelper.html#func_nat_uac_test

  # 1 - Contact header field is searched for occurrence of RFC1918 / RFC6598 addresses.
  # 2 - the "received" test is used: address in Via is compared against source IP address of signaling
  # 4 - Top Most VIA is searched for occurrence of RFC1918 / RFC6598 addresses
  # 8 - SDP is searched for occurrence of RFC1918 / RFC6598 addresses
  # 16 - test if the source port is different from the port in Via
  # 32 - address in Contact is compared against source IP address of signaling
  # 64 - Port in Contact is compared against source port of signaling

  if (nat_uac_test(18)) {
    force_rport();
    setflag("NAT_FLAG");
  }

  # OPTIONS requests
  # https://opensips.org/html/docs/modules/3.3.x/options.html
  if (is_method("OPTIONS")) {
    xlog("L_NOTICE", "Received OPTIONS from $fu\n");

    options_reply();
    exit;
  }

  # Device -> OpenSIPS

  if (is_method("REGISTER")) {
    if (isflagset("NAT_FLAG")) {
      xlog("L_NOTICE", "NATed register\n");
      # https://opensips.org/html/docs/modules/3.3.x/nathelper.html#func_fix_nated_register
      # The function creates a URI consisting of the source IP, port, and protocol
      # and stores the URI in an Attribute-Value-Pair.
      # The URI will be appended as "received" parameter to Contact in 200 OK
      # and registrar will store it in the user location database.

      fix_nated_register();
    }

    # authenticate the REGISTER requests
    # https://opensips.org/html/docs/modules/3.3.x/auth_db.html#func_www_authorize
    if (!www_authorize("somleng.org", "subscriber")) {
      # https://opensips.org/html/docs/modules/3.3.x/auth.html#func_www_challenge
      www_challenge("somleng.org", "auth");
      exit;
    }

    if ($au!=$tU) {
      send_reply(403,"Forbidden auth ID");
      exit;
    }
    # store the registration and generate a SIP reply
    if (!save("location"))
      xlog("failed to register AoR $tu\n");

    exit;
  }

  if (!mf_process_maxfwd_header(10)) {
    send_reply(483,"Too Many Hops");
    exit;
  }

  if (has_totag()) {
    # handle hop-by-hop ACK (no routing required)
    if ( is_method("ACK") && t_check_trans() ) {
      t_relay();
      exit;
    }

    # sequential request withing a dialog should
    # take the path determined by record-routing
    if ( !loose_route() ) {
      # we do record-routing for all our traffic, so we should not
      # receive any sequential requests without Route hdr.
      send_reply(404, "Not here");
      exit;
    }

    # validate the sequential request against dialog
    if ( $DLG_status!=NULL && !validate_dialog() ) {
      xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
      fix_route_dialog();
    }

    if (is_method("BYE")) {
      # do accounting even if the transaction fails
      do_accounting("log","failed");
    }

    # route it out to whatever destination was set by loose_route()
    # in $du (destination URI).
    route(RELAY);
    exit;
  }

  # CANCEL processing
  if (is_method("CANCEL")) {
    if (t_check_trans())
      route(RELAY);
    exit;
  } else if (!is_method("INVITE")) {
    send_reply(405,"Method Not Allowed");
    exit;
  }

  # INVITE Requests

  xlog("L_NOTICE", "Receiving $rm at $rd\n");

  if (is_domain_local($rd)) {
    xlog("L_NOTICE", "Domain is local. INVITE for an inbound call\n");

    setflag("INBOUND_FLAG");

    if ($rU==NULL) {
      # request with no Username in RURI
      send_reply(484,"Address Incomplete");
      exit;
    }

    if (!proxy_authorize("somleng.org", "subscriber")) {
      proxy_challenge("somleng.org", "auth");
      exit;
    }

    if ($au!=$fU) {
      send_reply(403, "Forbidden auth ID");
      exit;
    }

    # Remove credentials from upstream request
    # https://opensips.org/html/docs/modules/3.3.x/auth.html#func_consume_credentials
    consume_credentials();
  }

  # B - Upon reaching dialog lifetime, BYEs will be triggered both ways
  if (!create_dialog("B")) {
    send_reply(500,"Internal Server Error");
    exit;
  }
  t_check_trans();

  # Some UAC send a Route Header
  # with a local proxy IP in an initial INVITE Request
  # According to https://opensips.org/html/docs/modules/3.3.x/rr.html#func_loose_route
  # The only exception is for requests with preload Route headers (intial requests, carrying a Route header):
  # if there is only one Route header indicating the local proxy, then the Route header is removed and the function returns FALSE.
  # However after testing we see loose_route() returns TRUE in this scenario.
  # Therefore this is commented out for now.

  # preloaded route checking
  if (loose_route()) {
    xlog("L_ERR", "loose_route() returns true for invite!\n");
  	xlog("L_ERR", "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
  	if (!is_method("ACK"))
  		send_reply(403,"Preload Route denied");
  	exit;
  }

  # record routing
  # https://opensips.org/pipermail/users/2018-January/038722.html

  if (isflagset("INBOUND_FLAG")) {
    # Record-Route: <sip:LOCAL_IP:SIP_PORT;lr;r2=on;>
    # Record-Route: <sip:SIP_ADVERTISED_IP:SIP_PORT;lr;r2=on;>
    record_route_preset("LOCAL_IP:SIP_PORT", "SIP_ADVERTISED_IP:SIP_PORT");
  } else {
    # Record-Route: <sip:SIP_ADVERTISED_IP:SIP_PORT;lr;r2=on;>
    # Record-Route: <sip:LOCAL_IP:SIP_PORT;lr;r2=on;>
    record_route_preset("SIP_ADVERTISED_IP:SIP_PORT", "LOCAL_IP:SIP_PORT");
  }

  add_rr_param(";r2=on");

  do_accounting("log");

  if (isflagset("INBOUND_FLAG")) {
    if ($au != NULL) {
      append_hf("X-Somleng-Client-Identifier: $au\r\n");
    }

    if ($re != NULL) {
      append_hf("X-Somleng-Caller-Identity: $(re{uri.user})\r\n");
    } else {
      append_hf("X-Somleng-Caller-Identity: $fU\r\n");
    }

    append_hf("X-Somleng-Callee-Identity: $tU\r\n");
  }

  xlog("L_NOTICE", "Routing Request $si\n");

  if (isflagset("INBOUND_FLAG")) {
    xlog("L_NOTICE", "Load balancing request on port $rp\n");
    xlog("L_NOTICE", "Starting LB with resources: gw\n");

    if ( !lb_start(1,"gw")) {
      send_reply(500,"No Destination available");
      exit;
    }

    t_on_failure("GW_FAILOVER");
  }

  t_on_reply("RELAY");
  route(RELAY);
}

route[RELAY] {
  xlog("L_NOTICE", "Engage Media Proxy in $rm\n");

  rtpengine_manage();

  if (!t_relay()) {
    sl_reply_error();
  }
  exit;
}

onreply_route[RELAY] {
  xlog("L_NOTICE", "Engage Media Proxy for $rm\n");

  rtpengine_manage();
}

failure_route[GW_FAILOVER] {
  if (t_was_cancelled()) {
    exit;
  }

  # failure detection with redirect to next available trunk
  if (t_check_status("(408)|([56][0-9][0-9])")) {
    xlog("Failed trunk $rd/$du detected \n");

    if ( lb_next() ) {
      t_on_failure("GW_FAILOVER");
      t_relay();
      exit;
    }

    send_reply(500,"All GW are down");
  }
}

local_route {
  if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
    acc_log_request("200 Dialog Timeout");
  }
}
