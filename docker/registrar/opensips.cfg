####### Global Parameters #########

/* uncomment the following lines to enable debugging */
debug_mode=no

log_level=3
xlog_level=2
log_stderror=yes
log_facility=LOG_LOCAL0

udp_workers=4

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes

socket=udp:eth0:SIP_PORT as SIP_ADVERTISED_IP
socket=tcp:eth0:SIP_PORT # TCP Health Check

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

loadmodule "proto_tcp.so"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### POSTGRES module
loadmodule "db_postgres.so"

#### AVPOPS module
loadmodule "avpops.so"

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url", DATABASE_URL)

### OPTIONS module
loadmodule "options.so"

#### NAT modules
loadmodule "nathelper.so"
modparam("nathelper", "received_avp", "$avp(received)")

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")
modparam("usrloc", "db_url", DATABASE_URL)

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
# https://opensips.org/html/docs/modules/3.3.x/auth_db.html#param_calculate_ha1
modparam("auth_db", "calculate_ha1", 0) # Precalculated hash in database
modparam("auth_db", "db_url", DATABASE_URL)

#### Registrar Module
loadmodule "registrar.so"
modparam("registrar", "min_expires", 600)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "received_avp", "$avp(received)")

loadmodule "proto_udp.so"

####### Routing Logic ########

# main request routing logic

route{
  xlog("L_NOTICE", "Receiving request $rm from $si\n");

  # https://kb.smartvox.co.uk/opensips/nat-contact-and-via-fixing-in-sip-part-2/
  # https://www.cnblogs.com/zhangxianrong/p/14251867.html
  # https://opensips.org/html/docs/modules/3.3.x/nathelper.html#func_nat_uac_test

  # 2 - the "received" test is used: address in Via is compared against source IP address of signaling
  # 16 - test if the source port is different from the port in Via
  if (nat_uac_test(18)) {
    force_rport();
  }

  # OPTIONS requests
  # https://opensips.org/html/docs/modules/3.3.x/options.html
  if (is_method("OPTIONS")) {
    xlog("L_NOTICE", "Received OPTIONS from $fu\n");

    options_reply();
    exit;
  }

  if (is_method("REGISTER")) {
    if (nat_uac_test(122)) {
      xlog("L_NOTICE", "NAT register\n");
      fix_nated_register();
    }

    # authenticate the REGISTER requests
    # https://opensips.org/html/docs/modules/3.3.x/auth_db.html#func_www_authorize
    if (!www_authorize("somleng.org", "subscriber")) {
      # https://opensips.org/html/docs/modules/3.3.x/auth.html#func_www_challenge
      www_challenge("somleng.org", "auth");
      exit;
    }

    if ($au!=$tU) {
      send_reply(403,"Forbidden auth ID");
      exit;
    }
    # store the registration and generate a SIP reply
    if (!save("location"))
      xlog("failed to register AoR $tu\n");
    exit;
  } else {
    send_reply(405, "Method Not Allowed");
  }
}
