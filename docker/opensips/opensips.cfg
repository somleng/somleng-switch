####### Global Parameters #########

/* uncomment the following lines to enable debugging */
#debug_mode=yes

log_level=3
xlog_level=2
log_stderror=yes
log_facility=LOG_LOCAL0

udp_workers=4

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes

socket=udp:eth0:SIP_PORT as SIP_ADVERTISED_IP
socket=udp:eth0:SIP_ALTERNATIVE_PORT as SIP_ADVERTISED_IP
socket=tcp:eth0:SIP_PORT # TCP Health Check

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

loadmodule "proto_tcp.so"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", FIFO_NAME)
modparam("mi_fifo", "fifo_mode", 0666)

#### POSTGRES module
loadmodule "db_postgres.so"

#### AVPOPS module
loadmodule "avpops.so"

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url", DATABASE_URL)

### OPTIONS module
loadmodule "options.so"

### LOAD BALANCER module
loadmodule "load_balancer.so"
modparam("load_balancer", "db_url", DATABASE_URL)
modparam("load_balancer", "probing_method", "OPTIONS")

modparam("load_balancer", "probing_interval", 30)
modparam("load_balancer", "fetch_freeswitch_stats", 1)

loadmodule "freeswitch.so"

loadmodule "proto_udp.so"

####### Routing Logic ########


# main request routing logic

route{

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	# OPTIONS requests
	# https://opensips.org/html/docs/modules/3.3.x/options.html
	if (is_method("OPTIONS")) {
		xlog("L_NOTICE", "Received OPTIONS from $fu\n");

		options_reply();
		exit;
	}

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request withing a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		# validate the sequential request against dialog
		if ( $DLG_status!=NULL && !validate_dialog() ) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
			## exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(RELAY);
		exit;
	}

	#### INITIAL REQUESTS

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	} else if (!is_method("INVITE")) {
		send_reply(405,"Method Not Allowed");
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	t_check_trans();

	# Some UAC send a Route Header
	# with a local proxy IP in an initial INVITE Request
	# According to https://opensips.org/html/docs/modules/3.3.x/rr.html#func_loose_route
	# The only exception is for requests with preload Route headers (intial requests, carrying a Route header):
	# if there is only one Route header indicating the local proxy, then the Route header is removed and the function returns FALSE.
	# However after testing we see loose_route() returns TRUE in this scenario.
	# Therefore this is commented out for now.

	# preloaded route checking
	# if (loose_route()) {
	# 	xlog("L_ERR",
	# 		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
	# 	if (!is_method("ACK"))
	# 		send_reply(403,"Preload Route denied");
	# 	exit;
	# }

	# record routing
	record_route();

	do_accounting("log");

	xlog("L_NOTICE", "Load balancing request on port $rp\n");

	if ($rp == "SIP_PORT") {
		xlog("L_NOTICE", "Starting LB with resources: gw\n");

		if ( !lb_start(1,"gw")) {
			send_reply(500,"No Destination available");
			exit;
		}
	}

	if ($rp == "SIP_ALTERNATIVE_PORT") {
		xlog("L_NOTICE", "Starting LB with resources: gwalt\n");

		if ( !lb_start(1,"gwalt")) {
			send_reply(500,"No Destination available");
			exit;
		}
	}

	t_on_failure("GW_FAILOVER");

	route(RELAY);
}

route[RELAY] {
	append_hf("X-Src-Ip: $si\r\n");

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}


failure_route[GW_FAILOVER] {
	if (t_was_cancelled()) {
		exit;
	}

	# failure detection with redirect to next available trunk
	if (t_check_status("(408)|([56][0-9][0-9])")) {
		xlog("Failed trunk $rd/$du detected \n");


		if ( lb_next() ) {

			t_on_failure("GW_FAILOVER");
			t_relay();
			exit;
		}

		send_reply(500,"All GW are down");
	}
}


local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {

		acc_log_request("200 Dialog Timeout");

	}
}
