on: push
name: S3 MPEG

env:
  CI: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-deployment-matrix.outputs.matrix }}
      matrixLength: ${{ steps.set-deployment-matrix.outputs.matrixLength }}
    defaults:
      run:
        working-directory: components/s3_mpeg

    steps:
      - uses: FedericoCarboni/setup-ffmpeg@v1

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          working-directory: components/s3_mpeg
          ruby-version: '3.1'
          bundler-cache: true

      - name: Run Specs
        run: |
          bundle exec rspec

      # Adapted from
      # https://stackoverflow.com/a/65434401
      - name: Set Deployment Matrix
        id: set-deployment-matrix
        run: |
          branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')
          matrixSource=$(cat << EOF
          [
            {
              "identifier": "s3-mpeg-staging",
              "branch": "develop",
              "image_tag": "staging"
            },
            {
              "identifier": "somleng-switch_s3_mpeg",
              "branch": "master",
              "image_tag": "latest"
            }
          ]
          EOF
          )
          matrix=$(echo $matrixSource | jq --arg branchName "$branchName" 'map(. | select((.branch==$branchName)) )')
          echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
          echo ::set-output name=matrixLength::$(echo $matrix | jq length)

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.matrixLength > 0
    defaults:
      run:
        working-directory: components/s3_mpeg

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-southeast-1
      ECR_REGISTRY: 324279636507.dkr.ecr.ap-southeast-1.amazonaws.com
      ECR_REPOSITORY: 324279636507.dkr.ecr.ap-southeast-1.amazonaws.com/s3-mpeg
      IMAGE_TAG: ${{ github.sha }}

    strategy:
      matrix: ${{fromJson(needs.build.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        id: aws-login
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Login to AWS ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/arm64
          cache-from: type=gha,scope=${{ matrix.identifier }}
          cache-to: type=gha,mode=max,scope=${{ matrix.identifier }}
          context: components/s3_mpeg
          tags: |
            ${{ env.ECR_REPOSITORY }}:${{ matrix.image_tag }}
            ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy Lambda
        run: |
          aws lambda update-function-code --function-name ${{ matrix.identifier }} \
                                          --image-uri ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
                                          --architectures "arm64" \
                                          --publish

