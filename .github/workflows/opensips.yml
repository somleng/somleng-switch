on: push
name: OpenSIPS

env:
  CI: true

jobs:
  integration_tests:
    uses: ./.github/workflows/integration_tests.yml
    secrets:
      signalwire_token: ${{ secrets.SIGNALWIRE_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-deployment-matrix.outputs.matrix }}
      matrixLength: ${{ steps.set-deployment-matrix.outputs.matrixLength }}

    # Render task definition doesn't support working directory
    # https://github.com/aws-actions/amazon-ecs-render-task-definition/issues/68#issuecomment-881407765
    steps:
      - name: Set Deployment Matrix
        id: set-deployment-matrix
        run: |
          branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')
          matrixSource=$(cat << EOF
          [
            {
              "identifier": "somleng-switch-staging-opensips",
              "branch": "develop",
              "image_tag": "staging",
              "ecs_service": "somleng-switch-staging-opensips",
              "ecs_cluster": "somleng-switch-staging"
            },
            {
              "identifier": "somleng-switch-opensips",
              "branch": "master",
              "image_tag": "latest",
              "ecs_service": "somleng-switch-opensips",
              "ecs_cluster": "somleng-switch"
            }
          ]
          EOF
          )
          matrix=$(echo $matrixSource | jq --arg branchName "$branchName" 'map(. | select((.branch==$branchName)) )')
          echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
          echo ::set-output name=matrixLength::$(echo $matrix | jq length)

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - integration_tests
      - build

    if: needs.build.outputs.matrixLength > 0
    defaults:
      run:
        working-directory: docker/opensips

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-southeast-1
      ECR_PUBLIC_REGISTRY: public.ecr.aws
      OPENSIPS_ECR_REPOSITORY: public.ecr.aws/somleng/somleng-switch-opensips
      OPENSIPS_SCHEDULER_ECR_REPOSITORY: public.ecr.aws/somleng/somleng-switch-opensips-scheduler
      IMAGE_TAG: ${{ github.sha }}

    strategy:
      matrix: ${{fromJson(needs.build.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        id: aws-login
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Login to AWS Public ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ECR_PUBLIC_REGISTRY }}
        env:
          AWS_REGION: us-east-1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push OpenSIPS Bootstrap
        uses: docker/build-push-action@v3
        with:
          context: docker/opensips
          target: bootstrap
          push: true
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ matrix.identifier }}-bootstrap
          cache-to: type=gha,mode=max,scope=${{ matrix.identifier }}-bootstrap
          tags: |
            ${{ env.OPENSIPS_ECR_REPOSITORY }}:bootstrap

      - name: Build and push OpenSIPS
        uses: docker/build-push-action@v3
        with:
          context: "docker/opensips"
          push: true
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ matrix.identifier }}
          cache-to: type=gha,mode=max,scope=${{ matrix.identifier }}
          tags: |
            ${{ env.OPENSIPS_ECR_REPOSITORY }}:${{ matrix.image_tag }}
            ${{ env.OPENSIPS_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Build and push OpenSIPS Scheduler
        uses: docker/build-push-action@v3
        with:
          context: "docker/opensips_scheduler"
          push: true
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ matrix.identifier }}-scheduler
          cache-to: type=gha,mode=max,scope=${{ matrix.identifier }}-scheduler
          tags: |
            ${{ env.OPENSIPS_SCHEDULER_ECR_REPOSITORY }}:${{ matrix.image_tag }}
            ${{ env.OPENSIPS_SCHEDULER_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition --task-definition "${{ matrix.identifier }}" --query 'taskDefinition' > task-definition.json

      - name: Prepare OpenSIPS task definition
        id: render-opensips-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.task_definition }}
          container-name: opensips
          image: ${{ env.OPENSIPS_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Prepare OpenSIPS Scheduler task definition
        id: render-opensips-scheduler-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-opensips-task-def.outputs.task-definition }}
          container-name: opensips_scheduler
          image: ${{ env.OPENSIPS_SCHEDULER_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-opensips-scheduler-task-def.outputs.task-definition }}
          service: ${{ matrix.ecs_service }}
          cluster: ${{ matrix.ecs_cluster }}
          wait-for-service-stability: true
