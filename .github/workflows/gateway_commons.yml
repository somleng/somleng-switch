name: Gateway Commons
on: push

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-deployment-matrix.outputs.matrix }}
      matrixLength: ${{ steps.set-deployment-matrix.outputs.matrixLength }}

    steps:
      - name: Set Deployment Matrix
        id: set-deployment-matrix
        run: |
          branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')
          matrixSource=$(cat << EOF
          [
            {
              "identifier": "gateway-commons-staging",
              "branch": "develop",
              "image_tag": "staging"
            },
            {
              "identifier": "gateway-commons",
              "branch": "master",
              "image_tag": "latest"
            }
          ]
          EOF
          )
          matrix=$(echo $matrixSource | jq --arg branchName "$branchName" 'map(. | select((.branch==$branchName)) )')
          echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
          echo ::set-output name=matrixLength::$(echo $matrix | jq length)

  deploy:
    name: Deploy Gateway Commons
    runs-on: ubuntu-latest
    needs:
      - build

    if: needs.build.outputs.matrixLength > 0

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-southeast-1
      ECR_PUBLIC_REGISTRY: public.ecr.aws
      GATEWAY_ECR_REPOSITORY: public.ecr.aws/somleng/gateway
      GATEWAY_GHCR_REPOSITORY: ghcr.io/somleng/gateway
      OPENSIPS_SCHEDULER_ECR_REPOSITORY: public.ecr.aws/somleng/opensips-scheduler
      OPENSIPS_SCHEDULER_GHCR_REPOSITORY: ghcr.io/somleng/opensips-scheduler
      IMAGE_TAG: ${{ github.sha }}

    strategy:
      matrix: ${{fromJson(needs.build.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        id: aws-login
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
          aws-region: ap-southeast-1

      - name: Login to AWS Public ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_PUBLIC_REGISTRY }}
        env:
          AWS_REGION: us-east-1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push OpenSIPS Scheduler
        uses: docker/build-push-action@v4
        with:
          context: components/opensips_scheduler
          push: true
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ matrix.identifier }}-opensips-scheduler
          cache-to: type=gha,mode=max,scope=${{ matrix.identifier }}-opensips-scheduler
          tags: |
            ${{ env.OPENSIPS_SCHEDULER_ECR_REPOSITORY }}:${{ matrix.image_tag }}
            ${{ env.OPENSIPS_SCHEDULER_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.OPENSIPS_SCHEDULER_GHCR_REPOSITORY }}:${{ matrix.image_tag }}

      - name: Build and push OpenSIPS Bootstrap
        uses: docker/build-push-action@v4
        with:
          context: components/gateway
          target: bootstrap
          push: true
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ matrix.identifier }}-bootstrap
          cache-to: type=gha,mode=max,scope=${{ matrix.identifier }}-bootstrap
          tags: |
            ${{ env.GATEWAY_ECR_REPOSITORY }}:bootstrap
            ${{ env.GATEWAY_GHCR_REPOSITORY }}:bootstrap

